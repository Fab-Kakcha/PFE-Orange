package com.orange.olps.stageFabrice.webrtc;

import java.io.BufferedWriter;
import java.io.IOException;
import java.net.InetSocketAddress;

import org.java_websocket.WebSocket;
import org.java_websocket.WebSocketImpl;
import org.java_websocket.framing.Framedata;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

//import com.orange.olps.OmsException;

import java.io.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;

public class OmsService extends WebSocketServer {

	private static Logger logger = Logger.getLogger(OmsService.class);
	private static final String DEFAULT_OMS_HOST = "127.0.0.1";
	private static final String DEFAULT_OMS_PORT = "8080";
	private static final String DEFAULT_WS_PORT = "8887";
	// private static final String WEBRTC_CONF =
	// "/opt/application/64poms/current/conf/";
	private static final String WEBRTC_CONF = "C:\\Users\\JWPN9644\\opt\\application\\64poms\\current\\conf\\";
	protected static String hostVip = "127.0.0.1";
	protected static String portVip = "4670";
	private static String portWs = "8887";

	// private static HashMap<WebSocket, ClientServiceWebrtc> clients = new
	// HashMap<WebSocket, ClientServiceWebrtc>();
	protected static HashMap<WebSocket, OmsCall> calls = null;
	protected static HashMap<String, WebSocket> annuaire = null;

	static Properties prop = new Properties();
	static FileInputStream propFic = null;
	static BufferedWriter ficSdp = null;

	boolean appelEntrant = true;
	boolean sdpOffer = false;
	boolean callFabrice = false;
	boolean callTest2 = false;
	boolean isAnswer = false;
	boolean hasClientPressDisc = false;
	// String filePath =
	// "/var/opt/data/flat/64poms/files/logs/20150210/bonjour.a8k";
	// String filePathEnreg =
	// "/var/opt/data/flat/64poms/files/logs/20150210/recording.a8k";
	private OmsCall call;
	private static String receivedMsg = null;

	public void setReceivedMsg(String m) {
		receivedMsg = m;
	}

	public static String getReceivedMsg() {
		return receivedMsg;
	}

	public OmsCall getOmsCall() {
		return call;
	}

	public void setOmsCall(OmsCall omsCall) {
		call = omsCall;
	}

	public static void main(String[] args) {

	/*
	 * Initialisation des parametres depuis le fichier de properties
	 */

	
	 PropertyConfigurator.configure(WEBRTC_CONF + "log4j.properties");
	  
	 try { 
		 propFic = new FileInputStream(WEBRTC_CONF + "webRTC.properties"); 
	 }
	  catch (FileNotFoundException fnfe) {
		  logger.error("Le fichier webRTC.properties n existe pas.");
		  System.exit(2); 
	 } try { 
			  prop.load(propFic); propFic.close(); 
	  } catch (IOException ioe) {
	  logger.error("Impossible de lire le fichier de properties."); 
	  }
	  
	  hostVip = prop.getProperty("oms.host", DEFAULT_OMS_HOST); portVip =
	  prop.getProperty("oms.port", DEFAULT_OMS_PORT); portWs =
	  prop.getProperty("ws.port", DEFAULT_WS_PORT);
	 

	/*
	 * Demarrage du serveur de websocket en local pour recevoir les appels du
	 * navigateur
	 */

	OmsService oms = null;
	WebSocketImpl.DEBUG = false;
	
	  try { 
		  oms = new OmsService(); 
		  oms.start(); 
		  dort(500);
		  logger.info("OmsGateway started on port: " + oms.getPort());
	  
	  } catch (InterruptedException | IOException e) {
		  System.out.println("Erreur au lancement du serveur"); 
	  }
	
	}

	public OmsService() throws InterruptedException, IOException {

		super(new InetSocketAddress(new Integer(portWs).intValue()));

		// Demarrage de la conference
		// conf = new OmsConference("conf1");
		// enregistrement de la conférence
		// prévoir de demarrer l'enregistrement a l'arrivee d'un participant
		// et arreter a la sortie du dernier
		// conf.record("/tmp/conf1.wav");
		// Initialisation de la table des appels et de l'annuaire
		// L'annuaire pourrait etre une BDD ou un fichier xml ou autre
		// Dans un premier temps, c'est en memoire

		/*PropertyConfigurator.configure(WEBRTC_CONF + "log4j.properties");

		try {
			propFic = new FileInputStream(WEBRTC_CONF + "webRTC.properties");
		} catch (FileNotFoundException fnfe) {
			logger.error("Le fichier webRTC.properties n existe pas.");
			System.exit(2);
		}
		try {
			prop.load(propFic);
			propFic.close();
		} catch (IOException ioe) {
			logger.error("Impossible de lire le fichier de properties.");
		}

		hostVip = prop.getProperty("oms.host", DEFAULT_OMS_HOST);
		portVip = prop.getProperty("oms.port", DEFAULT_OMS_PORT);
		portWs = prop.getProperty("ws.port", DEFAULT_WS_PORT);*/

		/*
		 * Demarrage du serveur de websocket en local pour recevoir les appels
		 * du navigateur
		 */
	
		calls = new HashMap<WebSocket, OmsCall>();
		annuaire = new HashMap<String, WebSocket>();
		//this.start();
		//logger.info("OmsGateway started on port: " + this.getPort());
	}

	@Override
	public void onOpen(WebSocket conn, ClientHandshake handshake) {
		// logger.info("NOUVEAU CLIENT : " +
		// conn.getRemoteSocketAddress().getAddress().getHostAddress());

		// Arrivee d'un appel. On ne connait que conn
		// On instancie un OmsCall et on le stocke dans la table des OmsCall
		OmsCall call = new OmsCall(conn);
		calls.put(conn, call);
	}

	@Override
	public void onClose(WebSocket conn, int code, String reason, boolean remote) {
		logger.info("SORTIE DE CLIENT : "
				+ conn.getRemoteSocketAddress().getAddress().getHostAddress());

		// Quand un client se deconnecte, on detruit tout ce qui lui appartient
		OmsCall call = calls.get(conn);
		// call.unjoin(conf);
		if (!hasClientPressDisc) {
			try {
				call.closeClient();
			} catch (OmsException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		calls.remove(conn);
		conn.close();
		hasClientPressDisc = false;
	}

	@Override
	public void onMessage( WebSocket conn, String message ) {
		// Arrivee d'un message
		// On instancie la classe Message
		// On regarde de quel type est le message sdp ou commande
		// Si sdp, on etablie automatiquement l'appel
		logger.info("NAV ==> AS : " + message );
		OmsCall call = calls.get(conn);
		//OmsMessage msg = new OmsMessage(message);
		
		MonServiceWtc monServiceWtc = new MonServiceWtc(call,hostVip,portVip);
		OmsMessage msg = new OmsMessage(message);
		String typeMesg = msg.getTypeMsg();
		
		switch (typeMesg) {
			case "sdp":
				// Le message est du sdp
				String sdp = msg.getSdp();
			try {				
				if(!isAnswer){
					call.connect(hostVip,portVip);
					call.init(sdp);
					call.say("Bienvenue sur le serveur de conference", false);
				}else{
					call.answer(sdp);
					logger.info("la méthode answer a reussit");
				}
			} catch (OmsException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				break;
			case "cmd":
				// Le message est une commande				
				traiteCmd(conn, msg);
				break;
			default :
				// Le message est de type inconnu
				//logger.error("Type de message inconnu : " + message);
				logger.error("Format de message inconnu : " + message + ". Ce n'est pas du JSON");
		}
	}
		

	public void traiteCmd(WebSocket c, OmsMessage m) {
		OmsMessage msg = m;
		OmsCall call = calls.get(c);
		String cmd = msg.getCmd();
		String param = msg.getParam();
		switch (cmd) {
			case ("login"):
				// Le client s'identifie. param est l'identifiant			
				if(annuaire.containsKey(param)){
					logger.error("Le prénom est déjà utilisé");
					c.send("echecEnreg");
				}else{				
					annuaire.put(param, c);
				}
				break;
			case "logout":
				//c.send("logout");
				annuaire.remove(param);
			case ("call"):
				// Le client appelle quelqu'un deja enregistre. 
				// param est l'identifiant de la personne recherchee
				// call et call2 sont automatiquement trombonnes
			try {
				if(annuaire.containsKey(param)){
					c.send(param+"Connected");
					OmsCall call2 = calls.get(annuaire.get(param));
					call.call(call2);
				}
				else{
					c.send(param+"NotConnected");
				}
			
			} catch (OmsException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
				break;
			case "answer":
				isAnswer = true;
				break;
			case "say":
			try {
				call.say("Vous avez cliquez sur say", true);
			} catch (OmsException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
				break;
			case "play":
			try {
				call.play(param, true);
			} catch (OmsException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
			case ("record"):
				// Le client demande a ce que l'appel soit enregistre. 
			try {
				call.record(param);
			} catch (OmsException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				break;
			case ("stopRecord"):
				// Le client demande a arreter l'enregistrement. 
			try {
				call.stopRecord();
			} catch (OmsException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				break;
			case "recognize":
			try {
				call.recognize();
			} catch (OmsException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
				break;
			case ("dtmf"):
				// Le client saisit une pseudo dtmf. En fait, il clique sur un bouton
				switch (Integer.parseInt(param)){
					case 1:
					try {
						call.say("vous pouvez ecouter les offres 1", false);
					} catch (OmsException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
						break;
					case 2:
					try {
						call.say("vous pouvez ecouter les offre 2", false);
					} catch (OmsException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
						break;
					case 3:
					try {
						call.say("vous pouvez ecouter les offre 3", false);
					} catch (OmsException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
						break;
					default :
					try {
						call.say("Je ne vous ai pas entendu.", false);
					} catch (OmsException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				break;
			case ("joinConf"):
				// Le client demande a entrer dans la conférennce ouverte dans le constructeur
				// Elle est enregistree dans /tmp/conf1.wav
				// Il aurait pu la creer lui-meme
				// Param sert pour muteOn ou muteOff
				// conf.join(call) ou call.join(conf)
				//call.join(conf, param);
				break;
			case "disconnect":
			try {
				call.say("Au revoir, et a bientot sur OMS", false);
				dort(2000);
				calls.get(c).closeClient();
				hasClientPressDisc = true;
			} catch (OmsException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				break;
			default :
				// La commande n'est pas connue
				logger.error("Commande et param inconnus. cmd: " + cmd + " param: "+ param);
		}
	}
	//}

	public void onFragment(WebSocket conn, Framedata fragment) {
		logger.info("received fragment: " + fragment);
	}

	@Override
	public void onError(WebSocket conn, Exception ex) {
		ex.printStackTrace();
	}

	public static void dort(int temps) {
		try {
			Thread.sleep(temps);
		} catch (InterruptedException ex) {
			Thread.currentThread().interrupt();
		}
	}

	public static void logError(String attendu, String recu) {
		logger.error("ERREUR TEST : Reponse OMS incorrecte\n"
				+ "        Attendu : " + attendu + "\n        Recu    : "
				+ recu);
	}

}
